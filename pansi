#!/usr/bin/env bash

function here_printf {
  local format=${1:-"%b\n"}
  local text
  read -r -d '' text
  
  printf "${format}" "${text}"
}

function pansi::print_help {
  local script_name="$(basename "$0")"
  here_printf <<-HELP
$(pansi --bold "USAGE:")
  ${script_name} [-h|--help]
  ${script_name} --color-table
  ${script_name} [OPTIONS] <TEXT> [[OPTIONS] <TEXT>]...
  
$(pansi --bold "REFERENCE FLAGS:")
  -h,--help       Print this help message.
  --color-table   Print out a nicely formatted table of available colors and
                  attributes.
  
$(pansi --bold "OPTIONS:")
  --no-restore    Prevent the defaults from being set at the end of the command.
                  By default the ANSI codes are cleared out at the end because
                  typically you just want to modify the text passed to it, but
                  sometimes it's nice to keep some of these settings around for
                  subsequent text.
  -n,--new-line   Insert a newline after the command finishes. By default no new
                  line is inserted so that you can continue writing, and
                  potentially use ${script_name} mid-text.
                  
                  This only occurs at the very end of the ${script_name} command, so
                  if you are using the chaining format the newline won't be
                  inserted until after everything.
  --reset-color   Reset foreground and background color to default.
  --reset-text    Reset forground, background, and attributes to default.

  $(pansi --underline "Attributes"):
    --bold                          Make text "$(pansi --bold "bold")"
    --faint,--dim                   Make text "$(pansi --faint "faint")"
    --italic                        Make text "$(pansi --italic "italic")"
    --fraktur                       Change text to "$(pansi --fraktur "fraktur")" [Not often
                                    supported]
    --underline                     Make text "$(pansi --underline "underlined")"
    --double-underline              Make text "$(pansi --double-underline "underlined twice!")" [Not often
                                    supported]
    --blink                         Make text "$(pansi --blink "blink")"
    --reverse,--inverse             Invert background and foreground colors,
                                    "$(pansi --reverse "Example")"
    --invisible,--conceal           Make text "$(pansi --invisible "hidden")"
    --strikethrough,--crossedout    Make text "$(pansi --strikethrough "crossed out")"
    --frame                         Make text "$(pansi --frame "framed")" [Not often supported]
    --encircle                      Make text "$(pansi --encircle "encircled")" [Not often supported]
    --overline                      Make text "$(pansi --overline "overlined")" [Not often supported]
    
  $(pansi --underline "Colors"):
  
    --fg <colorname>[-intense]    Set the foreground text color to the specified 
                                  colorname.
                                  
                                  The color name options are:
                                  black, red, green, yelow, blue, magenta, cyan,
                                  and white.
                                  
                                  Additionally you can get an alternate 
                                  (lighter/brighter) color by appending 
                                  "-intense" to the colorname.
    --default                     Reset the foreground color to the system's 
                                  default color.
    --bg <colorname>[-intense]    Set the background text color to the specified 
                                  colorname.
                                  
                                  The color name options are:
                                  black, red, green, yelow, blue, magenta, cyan,
                                  and white.
                                  
                                  Additionally you can get an alternate 
                                  (lighter/brighter) color by appending 
                                  "-intense" to the colorname.
    --bg-default                  Reset the background color to the system's 
                                  default color.
    
  $(pansi --underline "Color Aliases"):
  
    For the above foreground and background colors there are a few alias color
    names. The format is the same, just sub in the alternative color name.
    
    $(pansi --italic "orange")
        Alias for 'yellow'
    $(pansi --italic "grey,gray")
        Alias for 'white'
    $(pansi --italic "dark-grey,dark-gray")
        Alias for 'black-intense'
        
    Additionally, instead of '<colorname>-intense', you can write either
    'bright-<colorname>' or 'light-<colorname>' as a modifier on any of the 
    foreground or background colors.
    
  $(pansi --underline "Cursor"):
  
    When a cursor option calls for an optional number parameter, it will default
    to '1' if omitted.
  
    --up [n]                        Move cursor up by 'n' rows
    --down [n]                      Move cursor down by 'n' rows
    --forward,--fwd [n]             Move cursor forward by 'n' columns
    --backward,--back [n]           Move cursor backward by 'n' columns
    --next-line,--next-row [n]      Move cursor to the beginning of the line 'n'
                                    rows down
    --prev-line,--prev-row [n]      Move cursor to the beginning of the line 'n'
                                    rows up
    --row.--line [n]                Move cursor to the 'n' row. Not relative to
                                    current position
    --column,--col [n]              Move cursor to the 'n' column. Not relative
                                    to current position
    --position [[row][,col]]        Move cursor to the specified 'row' and
                                    'col'. Missing options default to '1', if
                                    ommitted completely it will default to
                                    position '1,1'
    --tab-forward,--tab-fwd [n]     Move cursor forward 'n' tab stops
    --tab-backward,--tab-back [n]   Move cursor backward 'n' tab stops
    
    --save-cursor                   Saves the cursor position. Restores the
                                    cursor after command finishes, unless
                                    '--no-restore' is also used
    --restore-cursor                Restore the cursor to it's saved position
    --hide-cursor                   Hide the cursor during command execution.
                                    Cursor will be shown after the command
                                    finishes, unless '--no-restore' is also used
    --show-cursor                   Show a cursor if hidden
    
  $(pansi --underline "Display Manipulation"):
    --insert-chars [n]        Insert blank characters, shifting the line right
    --erase-chars [n]         Erase 'n' characters
    --repeat-char [n]         Repeat the last character 'n' times
    --erase-display [mode]    Clears part of the screen according to 'mode',
                              cursor position does not change:
                              $(pansi --italic "down|0")    From the cursor to the bottom of the
                                        screen (Default)
                              $(pansi --italic "up|1")      From the cursor to the beginning of the
                                        screen
                              $(pansi --italic "all|2")     Entire visible screen, sometimes placing
                                        the cursor in the upper left corner
                              $(pansi --italic "scroll|3")  Same as 'all' but also clears the
                                        scrollback buffer
    --erase-line [mode]       Erase part of the line according to the 'mode',
                              cursor position does not change:
                              $(pansi --italic "right|0")   From the cursor to the end of the line
                                        (Default)
                              $(pansi --italic "left|1")    From the cursor to the beginning of the
                                        line
                              $(pansi --italic "all|2")     The entire line
    --delete-lines [n]        Erase 'n' lines starting with current and moving
                              up. Lines below move up
    --insert-lines [n]        Add 'n' blank lines above current. The current
                              line and below move down
    --scroll-up [n]           Entire display moved up, new lines added at bottom
                              of screen
    --scroll-down [n]         Entire display moved down, new lines added at top
                              of screen
HELP
}

function pansi::color_value {
  local value
  local intense=false
  local name="$(sed -nE -e 's/^(intense|bright|light)[-_ \.]?([[:alpha:]]+[-_ \.]?[[:alpha:]]*)$/\"\2\"/p' \
  -e 's/^([[:alpha:]]+[-_ \.]?[[:alpha:]]*)[-_ \.]?(intense|bright|light)$/\"\1\"/p' <<< "$1")"
  
  if [[ -n ${name:+x} ]]; then
    intense=true
  else
    name="${1}"
  fi
  
  name="$(tr '[:upper:]' '[:lower:]' <<< "${name}" | tr -Cd '[:alnum:]')"
  
  case "$name" in
  [0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])
    value=$name
    ;;
  default)
    value=-1
    ;;
  black)
    value=0
    ;;
  red)
    value=1
    ;;
  green)
    value=2
    ;;
  yellow|orange)
    value=3
    ;;
  blue)
    value=4
    ;;
  magenta)
    value=5
    ;;
  cyan)
    value=6
    ;;
  white)
    value=7
    ;;
  grey|gray)
    [[ "$intense" == false ]] && value=7 || value=8
    ;;
  darkgrey|darkgray)
    value=8
    ;;
  esac
  
  if [[ "$intense" == true ]] && [[ $value -lt 8 ]] && [[ $value -ge 0 ]]; then
    (( value+=8 ))
  fi
  
  if [[ -z ${value:+x} ]]; then
    return 1
  fi
  
  printf "%i" "${value}"
}

function pansi::die {
  local _ret=$2
  test -n "$_ret" || _ret=1
  test "$_PRINT_HELP" == true && pansi::print_help >&2
  echo "$1" >&2
  exit ${_ret}
}

function pansi::begins_with_short_option {
  local first_option all_short_options
  all_short_options='hn'
  first_option="${1:0:1}"
  test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

function pansi::fail_short_options {
 pansi::die "The short option '${1}' can't be decomposed to ${1:0:2} and -${1:2}, because ${1:0:2} doesn't accept value and '-${1:2:1}' doesn't correspond to a short option."
}

function pansi::color_table {
    printf "%s\n"                   "$(pansi --underline "Frequently Supported:")"
    printf 'bold %s               ' "$(pansi --bold "Sample")"
    printf 'faint %s              ' "$(pansi --faint "Sample")"
    printf 'italic %s\n'            "$(pansi --italic "Sample")"
    printf 'underline %s          ' "$(pansi --underline "Sample")"
    printf 'blink %s              ' "$(pansi --blink "Sample")"
    printf 'inverse %s\n'           "$(pansi --inverse "Sample")"
    printf 'invisible %s\n'         "$(pansi --invisible "Sample")"
    printf "\n%s\n"                 "$(pansi --underline "Less Frequently Supported:")"
    printf 'strikethrough %s      ' "$(pansi --strikethrough "Sample")"
    printf 'fraktur %s            ' "$(pansi --fraktur "Sample")"
    printf 'double-underline %s\n'  "$(pansi --double-underline "Sample")"
    printf 'frame %s              ' "$(pansi --frame "Sample")"
    printf 'encircle %s           ' "$(pansi --encircle "Sample")"
    printf 'overline %s\n'          "$(pansi --overline "Sample")"
    printf '\n'
    
    printf "%s\n"                   "$(pansi --underline "Colors:")"
    printf '             black   red     green   yellow  blue    magenta cyan    white   default\n'
    local FNB_LOWER="$(pansi --faint --no-restore f --default-attributes)n$(pansi --bold --no-restore b --default-attributes)"
    local FNB_UPPER="$(pansi --faint --no-restore F --default-attributes)N$(pansi --bold --no-restore B --default-attributes)"
    local color_cycle=( black red green yellow blue magenta cyan white default )
    local BG FG PADDED
    for BG in "${color_cycle[@]}"; do
        PADDED="bg-${BG}           "
        PADDED="${PADDED:0:13}"
        printf '%s' "$PADDED"
        local FG
        for FG in "${color_cycle[@]}"; do
          pansi --fg ${FG} --bg ${BG} "${FNB_LOWER}"
          if [[ "${FG}" != "default" ]]; then
            pansi --fg ${FG}-intense --bg ${BG} "${FNB_UPPER}"
          fi
          printf "  "
        done
        printf '\n'
        
        if [[ "${BG}" != "default" ]]; then
          printf '  +intense   '
          for FG in "${color_cycle[@]}"; do
            pansi --bg ${BG}-intense --fg ${FG} "${FNB_LOWER}"
            if [[ "${FG}" != "default" ]]; then
              pansi --fg ${FG}-intense --bg ${BG}-intense "${FNB_UPPER}"
            fi
            printf "  "
          done
          printf '\n'
      fi
    done
    printf '\n'
    printf "%s\n" "$(pansi --italic "Legend:")"
    printf '    Normal color:  f = faint, n = normal, b = bold.\n'
    printf '    Intense color:  F = faint, N = normal, B = bold.\n'
    
    printf "%s\n\n "                   "$(pansi --underline "Full Color Table:")"
    
    local colorlist=()
    colorlist+=( $(seq 16 21) )
    colorlist+=( $(seq 27 22) )
    colorlist+=( $(seq 28 33) )
    colorlist+=( $(seq 39 34) )
    colorlist+=( $(seq 40 45) )
    colorlist+=( $(seq 51 46) )
    colorlist+=( $(seq 52 57) )
    colorlist+=( $(seq 63 58) )
    colorlist+=( $(seq 64 69) )
    colorlist+=( $(seq 75 70))
    
    local i
    count=1
    for i in "${colorlist[@]}"; do
    # for (( i = 16; i < 232; i++ )); do
      local cell=" $i"
      if [[ $i -lt 100 ]]; then
        cell="${cell} "
      fi
      pansi --bg $i --fg bright-white "${cell}"
      
      if (( ${count} % 12 == 0 )); then
        printf "\n "
      fi
      (( count++ ))
    done
}

function pansi {
  local newline=false
  local restore=true
  
  local ESC=$'\033'
  local CSI="${ESC}["
  
  local output=""
  
  if [[ $# -eq 0 ]]; then
    pansi::print_help
    exit 0
  fi
  
  while [[ $# -gt 0 ]]; do
    local _key="$1"
    case "${_key}" in
    # Text Attributes
    #----------------
    --bold|--bright)
      output="${output}${CSI}1m"
      ;;
    --dim|--faint)
      output="${output}${CSI}1m"
      ;;
    --reset-weight|--no-bold|--no-faint|--no-bright|--no-dim)
      output="${output}${CSI}22m"
      ;;
    --italic)
      output="${output}${CSI}3m"
      ;;
    --fraktur)
      output="${output}${CSI}20m"
      ;;
    --reset-type-style|--reset-italic|--reset-fraktur|--no-italic|--no-fraktur)
      output="${output}${CSI}23m"
      ;;
    --smul|--underline)
      output="${output}${CSI}4m"
      ;;
    --double-underline)
      output="${output}${CSI}21m"
      ;;
    --reset-underline|--no-underline|--no-smul|--no-double-underline)
      output="${output}${CSI}24m"
      ;;
    --blink)
      output="${output}${CSI}5m"
      ;;
    --reset-blink|--no-blink)
      output="${output}${CSI}25m"
      ;;
    --rev|--reverse|--inverse)
      output="${output}${CSI}7m"
      ;;
    --reset-inverse|--reset-reverse|--reset-rev|--no-inverse|--no-reverse|--no-rev)
      output="${output}${CSI}27m"
      ;;
    --invis|--invisible|--conceal|--no-reveal)
      output="${output}${CSI}8m"
      ;;
    --reveal|--reset-conceal|--reset-invisible|--reset-invis|--no-conceal|--no-invisible|--no-invis)
      output="${output}${CSI}28m"
      ;;
    --strike|--strikethrough|--strike-through|--crossed-out|--crossedout)
      output="${output}${CSI}9m"
      ;;
    --reset-strike|--reset-strikethrough|--reset-strike-through|--reset-crossed-out|--reset-crossedout|--no-strike|--no-strikethrough|--no-strike-through|--no-crossed-out|--no-crossedout)
      output="${output}${CSI}29m"
      ;;
    --frame)
      output="${output}${CSI}51m"
      ;;
    --encircle)
      output="${output}${CSI}52m"
      ;;
    --reset-frame|--no-frame|--reset-encircle|--no-encircle)
      output="${output}${CSI}54m"
      ;;
    --overline)
      output="${output}${CSI}53m"
      ;;
    --reset-overline|--no-overline)
      output="${output}${CSI}55m"
      ;;
    --reset-attrib|--reset-attributes|--no-attributes|--no-attrib|--default-attributes|--default-attrib)
      output="${output}${CSI}22;23;24;25;27;28;29;54;55m"
      ;;
      
    # Foreground Colors
    #------------------
    --reset-foreground|--default-foreground|--reset-fg|--default-fg|--fg-default|--default)
      output="${output}${CSI}m"
      ;;
    --fg)
      test $# -lt 2 && pansi::die "Missing argument for argument '$_key'"
      local value=$(pansi::color_value "$2")
      if [[ ${value} -ge 0 ]]; then
        output="${output}${CSI}38;5;${value}m"
      else
        output="${output}${CSI}39m"
      fi
      shift
      ;;
      
    # Background Color
    #-----------------
    --reset-background|--default-background|--reset-bg|--default-bg|--bg-default)
      output="${output}${CSI}m"
      ;;
    --bg)
      test $# -lt 2 && pansi::die "Missing argument for argument '$_key'"
      local value=$(pansi::color_value "$2")
      if [[ ${value} -ge 0 ]]; then
        output="${output}${CSI}48;5;${value}m"
      else
        output="${output}${CSI}49m"
      fi
      shift
      ;;
      
    # Reset
    #------------
    --reset-color)
      output="${output}${CSI}m"
      ;;
    --reset-text)
      output="${output}${CSI}m"
      ;;
    --reset)
      output="${output}${CSI}m" # Restore Colors and Attributes
      output="${output}${CSI}u" # Restore Cursor position
      output="${output}${CSI}?25h" # Show Cursor if hidden
      
      ;;
    # Cursor Control
    #---------------
    --up)
      local num=1
      if [[ $# -gt 1 ]] && grep -qe "^[0-9]\+$" <<< "$2" ; then
        num="$2"
        shift
      fi
      output="${output}${CSI}${num}A"
      ;;
    --down)
      local num=1
      if [[ $# -gt 1 ]] && grep -qe "^[0-9]\+$" <<< "$2" ; then
        num="$2"
        shift
      fi
      output="${output}${CSI}${num}B"
      ;;
    --forward|--fwd|--right)
      local num=1
      if [[ $# -gt 1 ]] && grep -qe "^[0-9]\+$" <<< "$2" ; then
        num="$2"
        shift
      fi
      output="${output}${CSI}${num}C"
      ;;
    --backward|--back|--left)
      local num=1
      if [[ $# -gt 1 ]] && grep -qe "^[0-9]\+$" <<< "$2" ; then
        num="$2"
        shift
      fi
      output="${output}${CSI}${num}D"
      ;;
    --next-line|--next-row)
      local num=1
      if [[ $# -gt 1 ]] && grep -qe "^[0-9]\+$" <<< "$2" ; then
        num="$2"
        shift
      fi
      output="${output}${CSI}${num}E"
      ;;
    --prev-line|--prev-row)
      local num=1
      if [[ $# -gt 1 ]] && grep -qe "^[0-9]\+$" <<< "$2" ; then
        num="$2"
        shift
      fi
      output="${output}${CSI}${num}F"
      ;;
    --row)
      local num=1
      if [[ $# -gt 1 ]] && grep -qe "^[0-9]\+$" <<< "$2" ; then
        num="$2"
        shift
      fi
      output="${output}${CSI}${num}d"
      ;;
    --column|--col)
      local num=1
      if [[ $# -gt 1 ]] && grep -qe "^[0-9]\+$" <<< "$2" ; then
        num="$2"
        shift
      fi
      output="${output}${CSI}${num}G"
      ;;
    --position)
      local _coords="1,1"
      if [[ $# -gt 1 ]] && grep -qe "^[0-9]*[,;]\?[0-9]\+$" <<< "$2" ; then
        _coords="$2"
        shift
      fi
      
      local coords
      IFS=,\; read -ra coords <<< "${_coords}"
      output="${output}${CSI}${coords}d"
      ;;
    --tab-forward|--tab-fwd|--tab-right)
      local num=1
      if [[ $# -gt 1 ]] && grep -qe "^[0-9]\+$" <<< "$2" ; then
        num="$2"
        shift
      fi
      output="${output}${CSI}${num}I"
      ;;
    --tab-backward|--tab-back|--tab-left)
      local num=1
      if [[ $# -gt 1 ]] && grep -qe "^[0-9]\+$" <<< "$2" ; then
        num="$2"
        shift
      fi
      output="${output}${CSI}${num}Z"
      ;;
    --save-cursor)
      output="${output}${CSI}s"
      ;;
    --restore-cursor)
      output="${output}${CSI}u"
      ;;
    --hide-cursor)
      output="${output}${CSI}?25l"
      ;;
    --show-cursor)
      output="${output}${CSI}?25h"
      ;;
      
    # Display Manipulation
    #---------------------
    --insert-chars)
      local num=1
      if [[ $# -gt 1 ]] && grep -qe "^[0-9]\+$" <<< "$2" ; then
        num="$2"
        shift
      fi
      output="${output}${CSI}${num}@"
      ;;
    --erase-chars)
      local num=1
      if [[ $# -gt 1 ]] && grep -qe "^[0-9]\+$" <<< "$2" ; then
        num="$2"
        shift
      fi
      output="${output}${CSI}${num}X"
      ;;
    --repeat-char)
      local num=1
      if [[ $# -gt 1 ]] && grep -qe "^[0-9]\+$" <<< "$2" ; then
        num="$2"
        shift
      fi
      output="${output}${CSI}${num}b"
      ;;
    --erase-display)
      local mode=0
      if [[ $# -gt 1 ]]; then
        case "$2" in
        0|down)
          mode=0
          shift
          ;;
        1|up)
          mode=1
          shift
          ;;
        2|all)
          mode=2
          shift
          ;;
        3|scroll)
          mode=3
          shift
          ;;
        esac
      fi
      output="${output}${CSI}${mode}J"
      ;;
    --erase-line)
      local mode=0
      if [[ $# -gt 1 ]]; then
        case "$2" in
        0|right)
          mode=0
          shift
          ;;
        1|left)
          mode=1
          shift
          ;;
        2|all)
          mode=2
          shift
          ;;
        esac
      fi
      output="${output}${CSI}${mode}K"
      ;;
    --delete-lines)
      local num=1
      if [[ $# -gt 1 ]] && grep -qe "^[0-9]\+$" <<< "$2" ; then
        num="$2"
        shift
      fi
      output="${output}${CSI}${num}M"
      ;;
    --insert-lines)
      local num=1
      if [[ $# -gt 1 ]] && grep -qe "^[0-9]\+$" <<< "$2" ; then
        num="$2"
        shift
      fi
      output="${output}${CSI}${num}L"
      ;;
    --scroll-up)
      local num=1
      if [[ $# -gt 1 ]] && grep -qe "^[0-9]\+$" <<< "$2" ; then
        num="$2"
        shift
      fi
      output="${output}${CSI}${num}S"
      ;;
    --scroll-down)
      local num=1
      if [[ $# -gt 1 ]] && grep -qe "^[0-9]\+$" <<< "$2" ; then
        num="$2"
        shift
      fi
      output="${output}${CSI}${num}T"
      ;;
      
    # One-Offs and Flags
    #-------------------
    -h|--help)
      pansi::print_help
      exit 0
      ;;
    -h*)
      pansi::print_help
      exit 0
      ;;
    --color-table)
      pansi::color_table
      exit 0
      ;;
    -n|--newline|--no-newline)
      if [[ "${_key:0:5}" = "--no-" ]]; then
        newline=false
      else
        newline=true
      fi
      ;;
    -n*)
      newline=true
      _next="${_key##-n}"
      if test -n "${_next}" -a "${_next}" != "${_key}"; then
        pansi::begins_with_short_option "${_next}" && shift && set -- "-n" "-${_next}" "$@" || pansi::fail_short_options "${_key}"
      fi
      ;;
    --no-restore)
      restore=false
      ;;
    # Positionals or Text
    #--------------------
    --*)
      local command=${_key#--}
      local is_bg=false
      if grep -qa "^bg-" <<< "$command"; then
        is_bg=true
        command=${command#bg-}
      fi
      
      local color=$(pansi::color_value "$command")
      if [[ -n ${color:+x} ]]; then
        local aspect=38
        if [ "$is_bg" == true ]; then
          (( aspect+=10 ))
        fi
        if [[ color -gt 0 ]]; then
          output="${output}${CSI}${aspect};5;${color}m"
        else
          output="${output}${CSI}$(( ${aspect}+1 ))m"
        fi
      fi
      ;;
    --)
      shift
      output="${output}$@"
      break
      ;;
    *)
        output="${output}${_key}"
      ;;
    esac
    shift
  done
  
  if [[ ${restore} == true ]]; then
    output="${output}${CSI}m" # Restore Colors and Attributes
    output="${output}${CSI}u" # Restore Cursor position
    output="${output}${CSI}?25h" # Show Cursor if hidden
  fi
  
  printf "%b" "${output}"
  
  if [[ ${newline} == true ]]; then
    printf "\n"
  fi
}

# Run if not sourced
if [[ "$0" == "${BASH_SOURCE[0]}" ]]; then
    pansi "$@"
fi